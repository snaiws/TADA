{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 건축 도면 데이터셋 MinIO 업로드 스크립트\n",
    "\n",
    "Training과 Validation 데이터의 ZIP 파일들을 MinIO 서버에 업로드합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "import sys\n",
    "import zipfile\n",
    "import tempfile\n",
    "import shutil\n",
    "\n",
    "# src 디렉토리를 파이썬 경로에 추가\n",
    "project_root = Path.cwd().parent\n",
    "sys.path.append(str(project_root))\n",
    "\n",
    "from data_engineering.obj_storage.boto3 import MinIOClient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터셋 절대 경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\n",
      "경로 존재 여부: False\n"
     ]
    }
   ],
   "source": [
    "# MinIO 클라이언트 초기화\n",
    "minio_client = MinIOClient()\n",
    "\n",
    "# 데이터셋 기본 경로 설정\n",
    "#DATASET_PATH = Path(\"../../temp/239.건축 도면 데이터/01-1.정식개방데이터\")\n",
    "DATASET_PATH = project_root.parent / \"temp\" / \"239.건축 도면 데이터\" / \"01-1.정식개방데이터\"\n",
    "\n",
    "# 처리할 디렉토리 구조 정의\n",
    "DIRECTORIES = [\n",
    "    \"Training/01.원천데이터\",\n",
    "    \"Training/02.라벨링데이터\",\n",
    "    \"Validation/01.원천데이터\",\n",
    "    \"Validation/02.라벨링데이터\"\n",
    "]\n",
    "\n",
    "# 버킷 이름 설정\n",
    "BUCKET_NAME = \"tada\"\n",
    "\n",
    "# 경로가 올바른지 확인\n",
    "print(f\"데이터셋 절대 경로: {DATASET_PATH.absolute()}\")\n",
    "print(f\"경로 존재 여부: {DATASET_PATH.exists()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "버킷 'tada' 생성 완료\n"
     ]
    }
   ],
   "source": [
    "# 버킷이 없으면 생성\n",
    "if not minio_client.check_bucket_exists(BUCKET_NAME):\n",
    "    minio_client.create_bucket(BUCKET_NAME)\n",
    "    print(f\"버킷 '{BUCKET_NAME}' 생성 완료\")\n",
    "else:\n",
    "    print(f\"버킷 '{BUCKET_NAME}' 이미 존재함\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터셋 경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\n",
      "경로 존재?: False\n",
      "\n",
      "Training/01.원천데이터:\n",
      "경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\\Training\\01.원천데이터\n",
      "존재?: False\n",
      "\n",
      "Training/02.라벨링데이터:\n",
      "경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\\Training\\02.라벨링데이터\n",
      "존재?: False\n",
      "\n",
      "Validation/01.원천데이터:\n",
      "경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\\Validation\\01.원천데이터\n",
      "존재?: False\n",
      "\n",
      "Validation/02.라벨링데이터:\n",
      "경로: g:\\Dropbox\\OssmMath\\52_AI-Project\\TADA\\src\\temp\\239.건축 도면 데이터\\01-1.정식개방데이터\\Validation\\02.라벨링데이터\n",
      "존재?: False\n"
     ]
    }
   ],
   "source": [
    "print(f\"데이터셋 경로: {DATASET_PATH}\")  \n",
    "print(f\"경로 존재?: {DATASET_PATH.exists()}\")  \n",
    "\n",
    "# 디렉토리 구조 확인  \n",
    "for dir_path in DIRECTORIES:  \n",
    "    full_path = DATASET_PATH / dir_path  \n",
    "    print(f\"\\n{dir_path}:\")  \n",
    "    print(f\"경로: {full_path}\")  \n",
    "    print(f\"존재?: {full_path.exists()}\")  \n",
    "    if full_path.exists():  \n",
    "        print(\"포함된 파일들:\")  \n",
    "        for file in full_path.iterdir():  \n",
    "            print(f\"  - {file.name}\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "임시 디렉토리 생성됨: C:\\Users\\dongr\\AppData\\Local\\Temp\\tmpda1ygy0m\n",
      "\n",
      "처리 중인 디렉토리: Training/01.원천데이터\n",
      "발견된 ZIP 파일 수: 0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "33131a77a3e14eaf9f4d2a5163a8a4e0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "ZIP 파일 처리 중: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "처리 중인 디렉토리: Training/02.라벨링데이터\n",
      "발견된 ZIP 파일 수: 0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "640ab7dc360f4b26ab27071ebe6f12bb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "ZIP 파일 처리 중: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "처리 중인 디렉토리: Validation/01.원천데이터\n",
      "발견된 ZIP 파일 수: 0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fa46feb6bbbf4620bd6b8dfa711f4bff",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "ZIP 파일 처리 중: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "처리 중인 디렉토리: Validation/02.라벨링데이터\n",
      "발견된 ZIP 파일 수: 0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "05158d0d541d41a98c62b959ae31d4ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "ZIP 파일 처리 중: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "임시 디렉토리 정리 완료\n"
     ]
    }
   ],
   "source": [
    "# 지원하는 이미지 확장자\n",
    "IMAGE_EXTENSIONS = {\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"}\n",
    "\n",
    "def is_image_file(filename):\n",
    "    return any(filename.lower().endswith(ext) for ext in IMAGE_EXTENSIONS)\n",
    "\n",
    "# 임시 디렉토리 생성\n",
    "temp_dir = Path(tempfile.mkdtemp())\n",
    "print(f\"임시 디렉토리 생성됨: {temp_dir}\")\n",
    "\n",
    "try:\n",
    "    from tqdm.notebook import tqdm\n",
    "    \n",
    "    # 각 디렉토리 처리\n",
    "    for dir_path in DIRECTORIES:\n",
    "        current_path = DATASET_PATH / dir_path\n",
    "        print(f\"\\n처리 중인 디렉토리: {dir_path}\")\n",
    "        \n",
    "        # ZIP 파일 목록 가져오기\n",
    "        zip_files = list(current_path.glob(\"*.zip\"))\n",
    "        print(f\"발견된 ZIP 파일 수: {len(zip_files)}\")\n",
    "        \n",
    "        # 각 ZIP 파일 처리\n",
    "        for zip_path in tqdm(zip_files, desc=\"ZIP 파일 처리 중\"):\n",
    "            # ZIP 파일 이름을 카테고리로 사용하되, 경로 구조도 보존\n",
    "            category = f\"{dir_path}/{zip_path.stem}\"\n",
    "            print(f\"\\n처리 중인 카테고리: {category}\")\n",
    "            \n",
    "            # ZIP 파일 압축 해제\n",
    "            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "                # 이미지 파일만 추출\n",
    "                for file_info in tqdm(zip_ref.filelist, desc=\"파일 추출 중\"):\n",
    "                    if is_image_file(file_info.filename):\n",
    "                        # 파일 경로에서 디렉토리 구조 유지\n",
    "                        relative_path = Path(file_info.filename)\n",
    "                        object_key = f\"{category}/{relative_path}\"\n",
    "                        \n",
    "                        # 임시 파일로 추출\n",
    "                        temp_path = temp_dir / relative_path.name\n",
    "                        with zip_ref.open(file_info) as source, open(temp_path, 'wb') as target:\n",
    "                            shutil.copyfileobj(source, target)\n",
    "                        \n",
    "                        try:\n",
    "                            # MinIO에 업로드\n",
    "                            minio_client.upload_file(\n",
    "                                bucket_name=BUCKET_NAME,\n",
    "                                object_name=object_key,\n",
    "                                file_path=str(temp_path)\n",
    "                            )\n",
    "                        except Exception as e:\n",
    "                            print(f\"업로드 실패: {object_key} - {str(e)}\")\n",
    "                        \n",
    "                        # 임시 파일 삭제\n",
    "                        temp_path.unlink()\n",
    "\n",
    "finally:\n",
    "    # 임시 디렉토리 정리\n",
    "    shutil.rmtree(temp_dir)\n",
    "    print(\"임시 디렉토리 정리 완료\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 업로드된 파일 확인\n",
    "uploaded_files = minio_client.list_objects(BUCKET_NAME)\n",
    "print(f\"업로드된 총 파일 수: {len(uploaded_files)}\")\n",
    "\n",
    "# 처음 몇 개의 파일 출력\n",
    "print(\"\\n업로드된 파일 목록 (처음 5개):\")\n",
    "for obj in list(uploaded_files)[:5]:\n",
    "    print(f\"- {obj}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
